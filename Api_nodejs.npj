{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{646ec847-22d4-40d1-b8ec-a82b25db012f}\",\n            \"in_index\": 0,\n            \"out_id\": \"{69ff5859-0186-409b-ba35-c6c596353230}\",\n            \"out_index\": 1\n        },\n        {\n            \"in_id\": \"{a2e518b9-2b1d-4506-a42f-3031e875459b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{69ff5859-0186-409b-ba35-c6c596353230}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{5b29b621-b0be-4e41-8f64-c73806d52605}\",\n            \"in_index\": 0,\n            \"out_id\": \"{a9b943c1-c139-47e0-93b4-60cdbeb555c5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{c200f220-c762-4136-bc12-7d153ee6131f}\",\n            \"in_index\": 0,\n            \"out_id\": \"{5b29b621-b0be-4e41-8f64-c73806d52605}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{69ff5859-0186-409b-ba35-c6c596353230}\",\n            \"in_index\": 0,\n            \"out_id\": \"{5b29b621-b0be-4e41-8f64-c73806d52605}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{8d6e1c09-65d8-4241-9b64-d2d54942033f}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2ae870b7-5aee-443a-a6f0-596e7f7ba256}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{3fb9f285-1eae-444d-adee-09a33f4b94a2}\",\n            \"in_index\": 0,\n            \"out_id\": \"{a9b943c1-c139-47e0-93b4-60cdbeb555c5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{a9b943c1-c139-47e0-93b4-60cdbeb555c5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3fb9f285-1eae-444d-adee-09a33f4b94a2}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{a2e518b9-2b1d-4506-a42f-3031e875459b}\",\n            \"model\": {\n                \"height\": 450,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 0,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 432\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 592.8636384737977,\n                \"y\": -206.5927397644611\n            }\n        },\n        {\n            \"id\": \"{3fb9f285-1eae-444d-adee-09a33f4b94a2}\",\n            \"model\": {\n                \"delay_time\": 1000,\n                \"name\": \"Delay\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -231.81818181818232,\n                \"y\": -218.090909090909\n            }\n        },\n        {\n            \"id\": \"{69ff5859-0186-409b-ba35-c6c596353230}\",\n            \"model\": {\n                \"data\": {\n                    \"alpha\": 0.5,\n                    \"beta\": 1,\n                    \"bn\": true,\n                    \"bn_size\": 3,\n                    \"color_map\": 20,\n                    \"font_scale\": 1.2,\n                    \"font_thickness\": 2,\n                    \"gm_result_drawing\": true,\n                    \"gm_thresh\": 150,\n                    \"map_classif_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"res\",\n                            \"config_path\": \"D:/20240725_07_14_36_98.4\"\n                        }\n                    ],\n                    \"mask_mode\": true,\n                    \"rect_thickness\": 10,\n                    \"result_drawing\": true,\n                    \"show_confidence\": true,\n                    \"text_drawing\": false,\n                    \"this_config_name\": \"res\",\n                    \"thresh\": 1,\n                    \"top\": 1,\n                    \"txt_offset\": 10,\n                    \"upsampling\": false\n                },\n                \"name\": \"DeepClassif\",\n                \"node_enable\": true,\n                \"obj_colors\": {\n                    \"array\": [\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 457.67343414311244,\n                \"y\": -382.99809882321136\n            }\n        },\n        {\n            \"id\": \"{7e58213c-6bb1-4353-8d83-70a7ce0a40a7}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python310\",\n                    \"script\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Assuming 'payload' is already defined elsewhere with the correct structure\\n# Example:\\n# payload = {\\n#     \\\"DeepClassif\\\": {\\\"objects\\\": [{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95}, {\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}]},\\n#     \\\"username\\\": \\\"user123\\\"\\n# }\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\nusername = payload[\\\"username\\\"]\\n\\n# Prepare data for the POST request\\n# Loop through the objects to extract name and prob\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(f\\\"Name: {name}, Probability: {prob}\\\")\\n\\n\\t# Now, prepare the payload for the POST request\\n\\tpost_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username}\\n\\n\\ttry:\\n\\t\\t# Send the POST request\\n\\t\\tresponse = requests.post(url, headers=headers, json=post_payload)\\n\\n\\t\\t# Check if the response is successful\\n\\t\\tif response.status_code == 200:\\n\\t\\t\\t# Parse the JSON data from the response\\n\\t\\t\\tdata = response.json()\\n\\n\\t\\t\\t# Process the response data as needed\\n\\t\\t\\tprint(f\\\"Response Data: {data}\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\n\\texcept requests.exceptions.RequestException as e:\\n\\t\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                    \"tmp_path\": \"C:/Users/ADMIN\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 636,\n                        \"splt1\": 125\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Assuming 'payload' is already defined elsewhere with the correct structure\\n# Example:\\n# payload = {\\n#     \\\"DeepClassif\\\": {\\\"objects\\\": [{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95}, {\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}]},\\n#     \\\"username\\\": \\\"user123\\\"\\n# }\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\nusername = payload[\\\"username\\\"]\\n\\n# Prepare data for the POST request\\n# Loop through the objects to extract name and prob\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(f\\\"Name: {name}, Probability: {prob}\\\")\\n\\n\\t# Now, prepare the payload for the POST request\\n\\tpost_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username}\\n\\n\\ttry:\\n\\t\\t# Send the POST request\\n\\t\\tresponse = requests.post(url, headers=headers, json=post_payload)\\n\\n\\t\\t# Check if the response is successful\\n\\t\\tif response.status_code == 200:\\n\\t\\t\\t# Parse the JSON data from the response\\n\\t\\t\\tdata = response.json()\\n\\n\\t\\t\\t# Process the response data as needed\\n\\t\\t\\tprint(f\\\"Response Data: {data}\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\n\\texcept requests.exceptions.RequestException as e:\\n\\t\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 708.0889669022745,\n                \"y\": -349.1660385584065\n            }\n        },\n        {\n            \"id\": \"{c6c2cb7d-0518-4c1e-b7c4-c73ccb31b8f2}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python310\",\n                    \"script\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Simulate the previous payload structure (you should replace this with the actual fetched payload)\\n# In practice, this would come from a user request or another source\\npayload = {\\n\\t\\\"DeepClassif\\\": {\\n\\t\\t\\\"objects\\\": [\\n\\t\\t\\t{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95},\\n\\t\\t\\t{\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}\\n\\t\\t]\\n\\t},\\n\\t\\\"username\\\": \\\"user123\\\"  # This would be dynamically passed in a real request\\n}\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n# Print the objects to confirm they're correct\\nprint(objects)\\n\\n# Prepare data for the POST request\\nname = \\\"\\\"\\nprob = \\\"\\\"\\nusername = payload.get(\\\"username\\\", \\\"\\\")  # Fetch the username from the payload\\n\\n# Loop through the objects to extract name and prob\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(objs[\\\"name\\\"], objs[\\\"prob\\\"])\\n\\n# Now, prepare the payload for the POST request\\n# Make sure the 'username' is dynamically included in the payload\\nupdated_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username}\\n\\ntry:\\n\\t# Send the POST request\\n\\tresponse = requests.post(url, headers=headers, json=updated_payload)\\n\\n\\t# Check if the response is successful\\n\\tif response.status_code == 200:\\n\\t\\t# Parse the JSON data from the response\\n\\t\\tdata = response.json()\\n\\t\\tprint(\\\"Response:\\\", data)\\n\\telse:\\n\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\nexcept requests.exceptions.RequestException as e:\\n\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                    \"tmp_path\": \"C:/Users/ADMIN\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 655,\n                        \"splt1\": 102\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Simulate the previous payload structure (you should replace this with the actual fetched payload)\\n# In practice, this would come from a user request or another source\\npayload = {\\n\\t\\\"DeepClassif\\\": {\\n\\t\\t\\\"objects\\\": [\\n\\t\\t\\t{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95},\\n\\t\\t\\t{\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}\\n\\t\\t]\\n\\t},\\n\\t\\\"username\\\": \\\"user123\\\"  # This would be dynamically passed in a real request\\n}\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n# Print the objects to confirm they're correct\\nprint(objects)\\n\\n# Prepare data for the POST request\\nname = \\\"\\\"\\nprob = \\\"\\\"\\nusername = payload.get(\\\"username\\\", \\\"\\\")  # Fetch the username from the payload\\n\\n# Loop through the objects to extract name and prob\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(objs[\\\"name\\\"], objs[\\\"prob\\\"])\\n\\n# Now, prepare the payload for the POST request\\n# Make sure the 'username' is dynamically included in the payload\\nupdated_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username}\\n\\ntry:\\n\\t# Send the POST request\\n\\tresponse = requests.post(url, headers=headers, json=updated_payload)\\n\\n\\t# Check if the response is successful\\n\\tif response.status_code == 200:\\n\\t\\t# Parse the JSON data from the response\\n\\t\\tdata = response.json()\\n\\t\\tprint(\\\"Response:\\\", data)\\n\\telse:\\n\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\nexcept requests.exceptions.RequestException as e:\\n\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 260.8622107916128,\n                \"y\": 424.28446708558124\n            }\n        },\n        {\n            \"id\": \"{67c42c3f-4b5a-42ca-b05a-91123065a938}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python310\",\n                    \"script\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n# Print the objects to confirm they're correct\\nprint(objects)\\n\\n# Prepare data for the POST request\\nname = \\\"\\\"\\nprob = \\\"\\\"\\nuserid = \\\"\\\"\\n\\n# Loop through the objects to extract name and prob\\nfor objs in objects:  # Change 'object' to 'objects'\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(objs[\\\"name\\\"], objs[\\\"prob\\\"])\\n\\n# Now, prepare the payload for the POST request\\n# This will overwrite the previous payload, consider how you want to use it\\npayload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"userid\\\": \\\"tete\\\"}\\n\\ntry:\\n\\t# Send the POST request\\n\\tresponse = requests.post(url, headers=headers, json=payload)\\n\\n\\t# Check if the response is successful\\n\\tif response.status_code == 200:\\n\\t\\t# Parse the JSON data from the response\\n\\t\\tdata = response.json()\\n\\n\\t\\t# Access the \\\"objects\\\" list inside \\\"DeepClassif\\\"\\n\\t\\tobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n\\t\\t# Loop through and display \\\"name\\\" and \\\"prob\\\" for each object\\n\\telse:\\n\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\nexcept requests.exceptions.RequestException as e:\\n\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                    \"tmp_path\": \"C:/Users/ADMIN\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 657,\n                        \"splt1\": 77\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import requests\\nimport json\\n\\n# URL for sending the POST request (replace with the actual API URL)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers for the request (if necessary)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# Accessing objects from the payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n# Print the objects to confirm they're correct\\nprint(objects)\\n\\n# Prepare data for the POST request\\nname = \\\"\\\"\\nprob = \\\"\\\"\\nuserid = \\\"\\\"\\n\\n# Loop through the objects to extract name and prob\\nfor objs in objects:  # Change 'object' to 'objects'\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(objs[\\\"name\\\"], objs[\\\"prob\\\"])\\n\\n# Now, prepare the payload for the POST request\\n# This will overwrite the previous payload, consider how you want to use it\\npayload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"userid\\\": \\\"tete\\\"}\\n\\ntry:\\n\\t# Send the POST request\\n\\tresponse = requests.post(url, headers=headers, json=payload)\\n\\n\\t# Check if the response is successful\\n\\tif response.status_code == 200:\\n\\t\\t# Parse the JSON data from the response\\n\\t\\tdata = response.json()\\n\\n\\t\\t# Access the \\\"objects\\\" list inside \\\"DeepClassif\\\"\\n\\t\\tobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\n\\n\\t\\t# Loop through and display \\\"name\\\" and \\\"prob\\\" for each object\\n\\telse:\\n\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\nexcept requests.exceptions.RequestException as e:\\n\\tprint(f\\\"An error occurred: {e}\\\")\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 391.7416018646261,\n                \"y\": 441.93425093231315\n            }\n        },\n        {\n            \"id\": \"{a9b943c1-c139-47e0-93b4-60cdbeb555c5}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -229.86064644677066,\n                \"y\": -331.6514055787179\n            }\n        },\n        {\n            \"id\": \"{5b29b621-b0be-4e41-8f64-c73806d52605}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_start\": false,\n                    \"caption\": \"API nodejs\",\n                    \"code\": \"import requests\\r\\nimport cv2\\r\\nimport numpy as np\\r\\n\\r\\n# Updated URL for JSON task\\r\\njson_task_url = \\\"http://192.168.0.236:3000/api/latest-image\\\"\\r\\n\\r\\ndef fetch_json_task(url):\\r\\n\\tresponse = requests.get(url)\\r\\n\\tif response.status_code == 200:\\r\\n\\t\\t# Read JSON data\\r\\n\\t\\tdata = response.json()\\r\\n\\t\\tif data:  # Check that JSON is not empty\\r\\n\\t\\t\\t# If data is a list, take the first item\\r\\n\\t\\t\\tif isinstance(data, list):\\r\\n\\t\\t\\t\\treturn data[0]\\r\\n\\t\\t\\treturn data\\r\\n\\t\\telse:\\r\\n\\t\\t\\tprint(\\\"Received empty JSON object.\\\")\\r\\n\\telse:\\r\\n\\t\\tprint(\\\"Failed to fetch JSON task. Status code:\\\", response.status_code)\\r\\n\\treturn None\\r\\n\\r\\ndef fetch_image_from_url(fileUrl):\\r\\n\\t# Fetch image data from URL\\r\\n\\tresponse = requests.get(fileUrl, stream=True)\\r\\n\\tif response.status_code == 200:\\r\\n\\t\\tbytes_data = b''\\r\\n\\t\\tfor chunk in response.iter_content(chunk_size=1024):\\r\\n\\t\\t\\tbytes_data += chunk\\r\\n\\t\\timg = cv2.imdecode(np.frombuffer(bytes_data, dtype=np.uint8), cv2.IMREAD_COLOR)\\r\\n\\t\\treturn img\\r\\n\\telse:\\r\\n\\t\\tprint(\\\"Failed to capture image from\\\", fileUrl, \\\"Status code:\\\", response.status_code)\\r\\n\\treturn None\\r\\n\\r\\ndef handle_request(req):\\r\\n\\t# Fetch task from JSON\\r\\n\\ttask = fetch_json_task(json_task_url)\\r\\n\\tif task is None:  # If JSON is not found\\r\\n\\t\\treturn None\\r\\n\\r\\n\\t# Check if 'fileUrl' key exists in task data\\r\\n\\tfileUrl = task.get('fileUrl')\\r\\n\\timg = fetch_image_from_url(fileUrl) if fileUrl else None\\r\\n\\r\\n\\t# Prepare response payload with username\\r\\n\\tpayload = {\\r\\n\\t\\t\\\"username\\\": task.get('username'),\\r\\n\\t\\t\\\"fileUrl\\\": fileUrl\\r\\n\\t}\\r\\n\\tresp = makeRespData(payload, img)\\r\\n\\r\\n\\treturn resp\\r\\n\\r\\ndef getReqData(req):\\r\\n\\t# Placeholder for request data handling\\r\\n\\treturn None, None\\r\\n\\r\\ndef makeRespData(payload, img):\\r\\n\\t# Prepare response data with payload and img\\r\\n\\treturn img\\r\\n\\r\\n# Execute handle_request\\r\\nrequest = None  # Create a new request\\r\\nresponse_image = handle_request(request)\\r\\n\",\n                    \"editor_setting\": {\n                        \"autoComplete\": {\n                            \"caseSensitivity\": true,\n                            \"enable\": true,\n                            \"threshold\": 3\n                        },\n                        \"indent\": {\n                            \"enable\": true\n                        },\n                        \"theme\": \"Material Dark\",\n                        \"whitespace\": {\n                            \"enable\": false,\n                            \"size\": 2\n                        }\n                    },\n                    \"icon\": \":/cira_bernoulli_python_plus/model/python_plus.png\",\n                    \"not_use_image\": true,\n                    \"python_path\": \"C:/Users/ADMIN/AppData/Local/Programs/Python/Python310/python.exe\"\n                },\n                \"name\": \"Python+\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -30.23880468081341,\n                \"y\": -409.9131321875797\n            }\n        },\n        {\n            \"id\": \"{c200f220-c762-4136-bc12-7d153ee6131f}\",\n            \"model\": {\n                \"height\": 448,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 0,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 395\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 104.20048564988718,\n                \"y\": -213.24485950413202\n            }\n        },\n        {\n            \"id\": \"{646ec847-22d4-40d1-b8ec-a82b25db012f}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"4. Python313\",\n                    \"script\": \"import requests\\nimport json\\n\\n# URL สำหรับส่ง POST request (แทนที่ด้วย URL ของ API ที่ใช้จริง)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers สำหรับ request (ถ้าจำเป็น)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# สมมติว่า payload ถูกกำหนดไว้แล้วด้วยโครงสร้างที่ถูกต้อง\\n# ตัวอย่าง:\\n# payload = {\\n#     \\\"DeepClassif\\\": {\\\"objects\\\": [{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95}, {\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}]},\\n#     \\\"username\\\": \\\"user123\\\",\\n#     \\\"fileUrl\\\": \\\"http://example.com/file1\\\"\\n# }\\n\\n# การเข้าถึงข้อมูลจาก payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\nusername = payload[\\\"username\\\"]\\nfileUrl = payload[\\\"fileUrl\\\"]\\n\\n# ตัวแปรสำหรับเก็บค่า fileUrl ก่อนหน้า\\nprevious_fileUrl = None  # เริ่มต้นด้วยการไม่มีค่า fileUrl\\n\\n# การวนลูปผ่าน object ต่างๆ เพื่อดึงชื่อและความน่าจะเป็น\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(f\\\"Name: {name}, Probability: {prob}\\\")\\n\\n\\t# เช็คว่า fileUrl แตกต่างจากค่า previous_fileUrl หรือไม่\\n\\tif fileUrl.strip() != (previous_fileUrl or \\\"\\\").strip():\\n\\t\\t# เตรียมข้อมูลสำหรับ POST request\\n\\t\\tpost_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username, \\\"fileUrl\\\": fileUrl}\\n\\n\\t\\ttry:\\n\\t\\t\\t# ส่ง POST request\\n\\t\\t\\tresponse = requests.post(url, headers=headers, json=post_payload)\\n\\n\\t\\t\\t# เช็คว่า response สำเร็จหรือไม่\\n\\t\\t\\tif response.status_code == 200:\\n\\t\\t\\t\\t# แปลงข้อมูล JSON จากการตอบกลับ\\n\\t\\t\\t\\tdata = response.json()\\n\\n\\t\\t\\t\\t# ประมวลผลข้อมูลที่ได้รับตามต้องการ\\n\\t\\t\\t\\tprint(f\\\"Response Data: {data}\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\n\\t\\texcept requests.exceptions.RequestException as e:\\n\\t\\t\\tprint(f\\\"เกิดข้อผิดพลาด: {e}\\\")\\n\\n\\t\\t# อัปเดต previous_fileUrl หลังจากส่ง POST request\\n\\t\\tprevious_fileUrl = fileUrl.strip()  # อัปเดตด้วยค่าที่ไม่มีช่องว่างหรืออักขระพิเศษ\\n\\telse:\\n\\t\\tprint(f\\\"File URL เป็นชื่อเดิม ({fileUrl}). ข้ามการส่ง POST request.\\\")\\n\",\n                    \"tmp_path\": \"C:/Users/ADMIN\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 664,\n                        \"splt1\": 166\n                    }\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import requests\\nimport json\\n\\n# URL สำหรับส่ง POST request (แทนที่ด้วย URL ของ API ที่ใช้จริง)\\nurl = \\\"http://192.168.0.236:3000/post\\\"\\n\\n# Headers สำหรับ request (ถ้าจำเป็น)\\nheaders = {\\n\\t\\\"Content-Type\\\": \\\"application/json\\\",\\n}\\n\\n# สมมติว่า payload ถูกกำหนดไว้แล้วด้วยโครงสร้างที่ถูกต้อง\\n# ตัวอย่าง:\\n# payload = {\\n#     \\\"DeepClassif\\\": {\\\"objects\\\": [{\\\"name\\\": \\\"Object1\\\", \\\"prob\\\": 0.95}, {\\\"name\\\": \\\"Object2\\\", \\\"prob\\\": 0.88}]},\\n#     \\\"username\\\": \\\"user123\\\",\\n#     \\\"fileUrl\\\": \\\"http://example.com/file1\\\"\\n# }\\n\\n# การเข้าถึงข้อมูลจาก payload\\nobjects = payload[\\\"DeepClassif\\\"][\\\"objects\\\"]\\nusername = payload[\\\"username\\\"]\\nfileUrl = payload[\\\"fileUrl\\\"]\\n\\n# ตัวแปรสำหรับเก็บค่า fileUrl ก่อนหน้า\\nprevious_fileUrl = None  # เริ่มต้นด้วยการไม่มีค่า fileUrl\\n\\n# การวนลูปผ่าน object ต่างๆ เพื่อดึงชื่อและความน่าจะเป็น\\nfor objs in objects:\\n\\tname = objs[\\\"name\\\"]\\n\\tprob = objs[\\\"prob\\\"]\\n\\tprint(f\\\"Name: {name}, Probability: {prob}\\\")\\n\\n\\t# เช็คว่า fileUrl แตกต่างจากค่า previous_fileUrl หรือไม่\\n\\tif fileUrl.strip() != (previous_fileUrl or \\\"\\\").strip():\\n\\t\\t# เตรียมข้อมูลสำหรับ POST request\\n\\t\\tpost_payload = {\\\"name\\\": name, \\\"prob\\\": prob, \\\"username\\\": username, \\\"fileUrl\\\": fileUrl}\\n\\n\\t\\ttry:\\n\\t\\t\\t# ส่ง POST request\\n\\t\\t\\tresponse = requests.post(url, headers=headers, json=post_payload)\\n\\n\\t\\t\\t# เช็คว่า response สำเร็จหรือไม่\\n\\t\\t\\tif response.status_code == 200:\\n\\t\\t\\t\\t# แปลงข้อมูล JSON จากการตอบกลับ\\n\\t\\t\\t\\tdata = response.json()\\n\\n\\t\\t\\t\\t# ประมวลผลข้อมูลที่ได้รับตามต้องการ\\n\\t\\t\\t\\tprint(f\\\"Response Data: {data}\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(f\\\"Request failed with status code: {response.status_code}\\\")\\n\\n\\t\\texcept requests.exceptions.RequestException as e:\\n\\t\\t\\tprint(f\\\"เกิดข้อผิดพลาด: {e}\\\")\\n\\n\\t\\t# อัปเดต previous_fileUrl หลังจากส่ง POST request\\n\\t\\tprevious_fileUrl = fileUrl.strip()  # อัปเดตด้วยค่าที่ไม่มีช่องว่างหรืออักขระพิเศษ\\n\\telse:\\n\\t\\tprint(f\\\"File URL เป็นชื่อเดิม ({fileUrl}). ข้ามการส่ง POST request.\\\")\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 709.6554754545451,\n                \"y\": -446.75127545454563\n            }\n        },\n        {\n            \"id\": \"{8d6e1c09-65d8-4241-9b64-d2d54942033f}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_start\": false,\n                    \"caption\": \"\",\n                    \"code\": \"import requests\\r\\nimport cv2\\r\\nimport numpy as np\\r\\nimport json\\r\\nimport random\\r\\nimport string\\r\\n\\r\\n# URL ของ JSON task\\r\\njson_task_url = \\\"https://smartgrid.cmru.ac.th/node-red/gettask\\\"\\r\\n\\r\\ndef generate_random_id():\\r\\n\\treturn ''.join(random.choices(string.ascii_letters + string.digits, k=10))\\r\\n\\r\\ndef fetch_json_task(url):\\r\\n\\tresponse = requests.get(url)\\r\\n\\tif response.status_code == 200:\\r\\n\\t\\t# อ่านข้อมูล JSON ให้สำเร็จ\\r\\n\\t\\tdata = response.json()\\r\\n\\t\\tif data:  # ตรวจสอบว่า JSON ไม่ว่าง\\r\\n\\t\\t\\treturn data\\r\\n\\t\\telse:\\r\\n\\t\\t\\tprint(\\\"Received empty JSON object.\\\")\\r\\n\\telse:\\r\\n\\t\\tprint(\\\"Failed to fetch JSON task. Status code:\\\", response.status_code)\\r\\n\\treturn None\\r\\n\\r\\ndef fetch_image_from_url(image_url):\\r\\n\\t# ดึงข้อมูลภาพจาก URL\\r\\n\\tresponse = requests.get(image_url, stream=True)\\r\\n\\r\\n\\tif response.status_code == 200:\\r\\n\\t\\tbytes = b''\\r\\n\\t\\tfor chunk in response.iter_content(chunk_size=1024):\\r\\n\\t\\t\\tbytes += chunk\\r\\n\\t\\timg = cv2.imdecode(np.frombuffer(bytes, dtype=np.uint8), cv2.IMREAD_COLOR)\\r\\n\\t\\treturn img\\r\\n\\telse:\\r\\n\\t\\tprint(\\\"Failed to capture image from\\\", image_url, \\\"Status code:\\\", response.status_code)\\r\\n\\treturn None\\r\\n\\r\\ndef handle_request(req):\\r\\n\\t# ดึง task จาก JSON\\r\\n\\ttask = fetch_json_task(json_task_url)\\r\\n\\tif task is None:  # หากหา JSON ไม่เจอ\\r\\n\\t\\treturn None\\r\\n\\r\\n\\tif 'image_url' in task:\\r\\n\\t\\timage_url = task['image_url']\\r\\n\\t\\timg = fetch_image_from_url(image_url)\\r\\n\\telse:\\r\\n\\t\\timg = None\\r\\n\\r\\n\\t# ส่ง response data payload และ img\\r\\n\\tpayload = {\\\"id_task\\\": task.get('id_task', generate_random_id())}  # กำหนด id_task กับตัว task\\r\\n\\tresp = makeRespData(payload, img)\\r\\n\\r\\n\\treturn resp\\r\\n\\r\\ndef getReqData(req):\\r\\n\\t# ดึงข้อมูลจาก request\\r\\n\\t# จัดการ payload และ img ที่จะส่งกลับ\\r\\n\\treturn None, None\\r\\n\\r\\ndef makeRespData(payload, img):\\r\\n\\t# ทำ response data\\r\\n\\t# จัดการ payload และ img\\r\\n\\treturn img\\r\\n\\r\\n# สร้างคำสั่งเรียกใช้ handle_request\\r\\nrequest = None  # สร้าง request ใหม่\\r\\nresponse_image = handle_request(request)\\r\\n\",\n                    \"editor_setting\": {\n                        \"autoComplete\": {\n                            \"caseSensitivity\": true,\n                            \"enable\": true,\n                            \"threshold\": 3\n                        },\n                        \"indent\": {\n                            \"enable\": true\n                        },\n                        \"theme\": \"Material Dark\",\n                        \"whitespace\": {\n                            \"enable\": false,\n                            \"size\": 2\n                        }\n                    },\n                    \"icon\": \":/cira_bernoulli_python_plus/model/python_plus.png\",\n                    \"not_use_image\": true,\n                    \"python_path\": \"C:/Users/ADMIN/AppData/Local/Programs/Python/Python310/python.exe\"\n                },\n                \"name\": \"Python+\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -142,\n                \"y\": -700\n            }\n        },\n        {\n            \"id\": \"{2ae870b7-5aee-443a-a6f0-596e7f7ba256}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -336,\n                \"y\": -673\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_fix\": false,\n        \"flow_view_pos_x\": -25.05932828551613,\n        \"flow_view_pos_y\": -310.4060267570797,\n        \"flow_view_zoom_factor\": 0.8264462809917354\n    }\n}\n",
            "name": "Main"
        }
    ]
}
